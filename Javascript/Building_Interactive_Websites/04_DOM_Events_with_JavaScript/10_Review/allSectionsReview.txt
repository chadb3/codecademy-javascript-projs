Events are stored as objects

This covers that there are properties associated with event objects.

- .target - ref to what it is registered to
- .type - name of the event
- .timestamp - number of milliseconds that passed since the document loaded and the event triggered. 

so what they mean is

function asdf(event){
 console.log(event.timestamp);
}

one can call event.(property) above

thisTarget.addEventListener('click',asdf);


The lesson starts off with there is another way to do event handlers besides ".addEventListener()"

There is also an ".onevent" property
the pattern is: ".on" followed by lowercased type name

example:

eventTarget.onclick = myEventHandlerFunction;

 - eventTarget is given the ".onclick" property and its value = myEventHandlerFunction

Important:

".onevent" property and ".addEventListener()" will both register event listiners

With the ".onevent" only one event handler function can be attached to the event target. 

".addEventListener()" can handle multiple event handler functions
This lesson starts off with

.addEventListener()

method.

using .addEventListener() we can have the DOM element listen for a specific event and execute a block of code when it detects the event. 

Event Target = the DOM element that is listening for an event

we can use it like the following example

let eventTarget=document.getElementById('target');
	- used to get the target
eventTarget.addEventListener('click',function())
{
 // Code will run here

}
	- addEventListener takes 2 args
		- Event_Name : String
		- Event_Handler : Function
	
	- Click = the event
		- fires when "eventTarget" is clicked

	- The "{Code Block}" will execute when the click event is detected

!Gotcha Alert!

It's best practice to create a named event handler function.
Code will remain organized and reusable this way, even if the code gets very complex.

Example:

function eventHandlerFunction(){
 // code goes here
}

eventTarget.addEventListner('click',eventHandlerFunction);

this is better than defining an anonymous functions within the method.

// end
https://developer.mozilla.org/en-US/docs/Web/Events

The article indicates that there are more events (besides click) that can fire in a browser

The article lists many types of events that can fire in the browser. 


This lesson shows a "Pavlovian" Analogy to describe how Events are triggered, detected, and handled. 

The lesson describes how the ringing of a bell is like an event firing. 
the dog hears this bell and the dog starts to dog out as it knows it is dinner time, is like the event being detected. 
the dog gets its food, and eats is like the event being handled. 

so an example of firing events in the DOM:

User clicks on a "button" this button calls a function that changes something on the page. 

button->function->"something happens"
keyboard events

keydown - press key down
keyup - release key and it goes up
keypress - complete key press
mouse events

click - click the mouse
wheel - scroll the mouse wheel
mousedown - press the mouse down
mouseup - release the mouse button
mouseover - enters the content of an element
mouseout - leaves the content of an element 
This lesson covers

".removeEventListener()" method to remove ".addEventListner()" Method.

Takes in the following args
1. string event type
2. the even handler function

used like the following

Target.removeEventListener("click", myClickEven01);

Notes: removeEventListener needs both the exact (event, eventHandler) for each one that is needed to be removed.

if .addEventListener is an anonymous function, then it cannot be removed.
This lesson deals with
with clicking on things

These are called events.
 - a mouse clicking on a button
 - webpages files loading in a browser 
 - a user interacting with an image

when a user does any of the above, they are causing an event to be fired. 

Overall this deals with when a user clicks on something intractable, it causes an event to be fired.

this is a basic lesson with no work other than observing the intractability on the example webpage. 
